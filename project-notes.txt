------------------------------------------------------------
TicTacToe --------------------------------------------------
------------------------------------------------------------
pu@ finding a way to explicitly map the url parameters to the action parameters [figured it out. the routing engine is smart enought to map url parameters to the action parameters with the same name. Even if they are in a different order.]

There's going to have to be some js plumbing that handles the updates and conversation making between the server. e.g. pings that server looking for new chat messages/moves and then applies the moves and messages to the client's page.


+ Sign In
  - nickname
  - authed user

+ Start
  + Play online
    - Que for Quick Match (next open player)
    - See other active players
      - Be able to request a game with them

  + Play local

  + Play against AI

  + stats

- Chat during game
- See player stats

Tables =====================================================

User
  UserType
  Username
  Password


UserType (simple or authed)
  UserType

Game
  Player1ID
  Player2ID
  WinnerID

Move
  GameID
  DateTime
  UserID
  MoveNumber
  Possition

ChatMessage
  DateTime
  GameID
  UserID
  Message

HTML Snippits ==============================================

- Validation
-----
required maxlength='255'
-----


PHP Snippits ===============================================

- Pretty print variables
-----
return "<pre>" . print_r($var, true) . "</pre>";
-----

SQL Snippits ===============================================

- Initial creation of DB
-----
CREATE DATABASE tictactoe;
-----

- Create application user
-----
CREATE USER 'tictactoe'@'%' IDENTIFIED BY 'tictactoe';
GRANT ALL ON tictactoe.* TO 'tictactoe'@'%';
CREATE USER 'tictactoe'@'localhost' IDENTIFIED BY 'tictactoe';
GRANT ALL ON tictactoe.* TO 'tictactoe'@'localhost';
-----

- Create table snippet
-----
    DB::statement("
      CREATE TABLE user(
        id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
        created TIMESTAMP DEFAULT NOW(), 
        updated TIMESTAMP DEFAULT NOW() ON UPDATE NOW()
      )
    ;")
-----





Match Business Logic =======================================

- User1 submits request for match with user2
- Request is persisted to DB 
- User2 will recieve request as a response to his running "search for requests" functionality
- User2 submits acceptance for request form user 1
- User2's acceptance is persisted to DB 
- Server set's up match and add's users to it


Before I can Say I'm Done ==================================
- Add favicon
- Forgot password/username?


Immediate stuff to do ======================================
- match client validation with server for postLogin
